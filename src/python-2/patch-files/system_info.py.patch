--- numpy-1.8.0/numpy/distutils/system_info.py	2013-10-30 11:31:40.000000000 -0700
+++ patch-files/system_info.py	2014-03-14 13:26:18.291063032 -0700
@@ -198,7 +198,7 @@
     default_include_dirs = ['/usr/local/include',
                             '/opt/include', '/usr/include',
                             # path of umfpack under macports
-                            '/opt/local/include/ufsparse',
+                            # '/opt/local/include/ufsparse',
                             '/opt/local/include', '/sw/include',
                             '/usr/include/suitesparse']
     default_src_dirs = ['.', '/usr/local/src', '/opt/src', '/sw/src']
@@ -208,13 +208,13 @@
     default_x11_include_dirs = ['/usr/X11R6/include', '/usr/X11/include',
                                 '/usr/include']
 
-    if os.path.exists('/usr/lib/X11'):
-        globbed_x11_dir = glob('/usr/lib/*/libX11.so')
-        if globbed_x11_dir:
-            x11_so_dir = os.path.split(globbed_x11_dir[0])[0]
-            default_x11_lib_dirs.extend([x11_so_dir, '/usr/lib/X11'])
-            default_x11_include_dirs.extend(['/usr/lib/X11/include',
-                                             '/usr/include/X11'])
+    # if os.path.exists('/usr/lib/X11'):
+    #     globbed_x11_dir = glob('/usr/lib/*/libX11.so')
+    #     if globbed_x11_dir:
+    #         x11_so_dir = os.path.split(globbed_x11_dir[0])[0]
+    #         default_x11_lib_dirs.extend([x11_so_dir, '/usr/lib/X11'])
+    #         default_x11_include_dirs.extend(['/usr/lib/X11/include',
+    #                                          '/usr/include/X11'])
 
     import subprocess as sp
     tmp = None
@@ -247,7 +247,11 @@
 default_include_dirs = [_m for _m in default_include_dirs if os.path.isdir(_m)]
 default_src_dirs = [_m for _m in default_src_dirs if os.path.isdir(_m)]
 
-so_ext = get_shared_lib_extension()
+# so_ext = get_shared_lib_extension()
+so_ext = distutils.sysconfig.get_config_vars('SO')[0] or ''
+# fix long extension for Python >=3.2, see PEP 3149.
+if 'SOABI' in distutils.sysconfig.get_config_vars():
+    so_ext = so_ext.replace('.'+distutils.sysconfig.get_config_var('SOABI'), '', 1)
 
 
 def get_standard_file(fname):
@@ -978,8 +982,9 @@
         if sys.platform == 'win32':
             lapack_libs = self.get_libs('lapack_libs', ['mkl_lapack'])
         else:
-            lapack_libs = self.get_libs('lapack_libs',
-                                        ['mkl_lapack32', 'mkl_lapack64'])
+            # lapack_libs = self.get_libs('lapack_libs',
+            #                             ['mkl_lapack32', 'mkl_lapack64'])
+            lapack_libs = self.get_libs('lapack_libs',[' '])
 
         info = {'libraries': lapack_libs}
         dict_append(info, **mkl)
@@ -1387,9 +1392,10 @@
             # Use the system lapack from Accelerate or vecLib under OSX
             args = []
             link_args = []
-            if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
-               'x86_64' in get_platform() or \
-               'i386' in platform.platform():
+            # if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
+            #    'x86_64' in get_platform() or \
+            #    'i386' in platform.platform():
+            if get_platform()[-4:] == 'i386':
                 intel = 1
             else:
                 intel = 0
@@ -1484,9 +1490,10 @@
             # Use the system BLAS from Accelerate or vecLib under OSX
             args = []
             link_args = []
-            if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
-               'x86_64' in get_platform() or \
-               'i386' in platform.platform():
+            # if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
+            #    'x86_64' in get_platform() or \
+            #    'i386' in platform.platform():
+            if get_platform()[-4:] == 'i386':
                 intel = 1
             else:
                 intel = 0
